// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id             String   @id @default(uuid())
  name                String
  email               String   @unique
  password            String
  is_budget_recurrent Boolean?

  budget      Budget[]
  bill        Bill[]
  tag         Tag[]
  credit_card CreditCard[]

  @@map("user")
}

model Budget {
  budget_id  Int      @id @default(autoincrement())
  amount     Float
  strategy   Strategy
  created_at DateTime
  user_id    String

  user User @relation(fields: [user_id], references: [user_id])

  @@map("budget")
}

model Bill {
  bill_id        Int      @id @default(autoincrement())
  price          Float
  title          String
  date           DateTime @default(now())
  user_id        String
  category_id    Int      @unique
  credit_card_id Int

  user        User       @relation(fields: [user_id], references: [user_id])
  category    Category   @relation(fields: [category_id], references: [category_id])
  credit_card CreditCard @relation(fields: [credit_card_id], references: [credit_card_id])
  Tag         Tag[]

  @@map("bill")
}

model Category {
  category_id Int    @id @default(autoincrement())
  name        String
  Bill        Bill?

  @@map("category")
}

model Tag {
  tag_id  Int    @id @default(autoincrement())
  name    String
  user_id String
  bill_id Int

  Bill Bill @relation(fields: [bill_id], references: [bill_id])
  User User @relation(fields: [user_id], references: [user_id])

  @@map("tag")
}

model CreditCard {
  credit_card_id   Int      @id @default(autoincrement())
  name             String
  bank             String   @db.VarChar(60)
  invoice_due_date DateTime @db.Timestamp(3)
  limit            Float
  user_id          String

  Bill Bill[]
  User User   @relation(fields: [user_id], references: [user_id])

  @@map("credit_card")
}

enum Strategy {
  Daily
  Weekly
  Biweekly
  Month
  Annual
}
